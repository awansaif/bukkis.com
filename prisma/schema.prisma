// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String      @id @default(cuid())
  name          String?
  shortname     String?
  username      String?     @unique
  email         String?     @unique
  emailVerified DateTime?
  password      String?     @db.Text
  image         String?
  accounts      Account[]
  sessions      Session[]
  UserGroup     UserGroup[]
  Media         Media[]
  UserMedia     UserMedia[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Group {
  id          String       @id @default(cuid())
  name        String
  description String?
  UserGroup   UserGroup[]
  MediaGroup  MediaGroup[]
}

model UserGroup {
  id      String @id @default(cuid())
  userId  String
  groupId String

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([userId, groupId])
}

model Media {
  id          String       @id @default(cuid())
  name        String
  description String?
  url         String
  type        String
  size        Int
  width       Int
  height      Int
  duration    Int
  userId      String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  MediaGroup  MediaGroup[]
  UserMedia   UserMedia[]
  User        User         @relation(fields: [userId], references: [id])
}

model MediaGroup {
  id      String @id @default(cuid())
  mediaId String
  groupId String

  media Media @relation(fields: [mediaId], references: [id], onDelete: Cascade)
  group Group @relation(fields: [groupId], references: [id], onDelete: Cascade)

  @@unique([mediaId, groupId])
}

model UserMedia {
  id      String @id @default(cuid())
  userId  String
  mediaId String

  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  media Media @relation(fields: [mediaId], references: [id], onDelete: Cascade)

  @@unique([userId, mediaId])
}
